---
daemonset:
  # Annotations to apply to the daemonset
  annotations: {}
  # additionals labels
  labels: {}
  affinity: {}
  # Include the daemonset
  enabled: true
  # Extra environment variables for Metricbeat container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  #  - name: MY_ENVIRONMENT_VAR
  #    value: the_value_goes_here
  extraVolumes: []
  # - name: extras
  #   emptyDir: {}
  extraVolumeMounts: []
  # - name: extras
  #   mountPath: /usr/share/extras
  #   readOnly: true
  hostAliases: []
  #- ip: "127.0.0.1"
  #  hostnames:
  #  - "foo.local"
  #  - "bar.local"
  hostNetworking: false
  # Allows you to add any config files in /usr/share/metricbeat
  # such as metricbeat.yml for daemonset
  metricbeatConfig:
    metricbeat.yml: |
      metricbeat.config.modules:
        # Mounted `metricbeat-daemonset-modules` configmap:
        path: $${path.config}/modules.d/*.yml
        # Reload module configs as they change:
        reload.enabled: false
      metricbeat.autodiscover:
        providers:
          - type: kubernetes
            host: $${HOSTNAME}
            templates:
              - condition.equals:
                  kubernetes.annotations.prometheus.io/scrape: "true"
                config:
                  - module: prometheus
                    period: 10s
                    # Prometheus exporter host / port
                    hosts: ["prometheus-operated.prometheus:9090"]
                    metrics_path: /metrics
                    headers:
                      accept: "text/plain"

      processors:
        - add_cloud_metadata:
      output.elasticsearch:
        hosts: ['$${ELASTICSEARCH_HOST:opensearch-cluster-master}.opensearch:$${ELASTICSEARCH_PORT:9200}']
        username: "admin"
        password: "admin"
        protocol: "https"
        enabled: true
        ssl.verification_mode: none
      setup.ilm.enabled: false
      setup.dashboards.enabled: false
      setup.kibana:
        host: http://opensearch-dashboards.opensearch:5601
        username: admin
        password: admin
        headers:
          securitytenant: global
      metricbeat.modules:
      - module: kubernetes
        enabled: true
        metricsets:
          - node
          - system
          - pod
          - container
          - volume
        period: 10s
        host: "$${NODE_NAME}"
        hosts: ["https://$${NODE_NAME}:10250"]
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        ssl.verification_mode: "none"
        add_metadata: true
      - module: system
        enabled: true
        period: 10s
        metricsets:
          - cpu
          - load
          - memory
          - network
          - process
          - process_summary
        processes: ['.*']
        process.cgroups.enabled: false
        process.include_top_n:
          by_cpu: 5
          by_memory: 5
      - module: system
        enabled: true
        period: 1m
        process.cgroups.enabled: false
        metricsets:
          - filesystem
          - fsstat
        processors:
        - drop_event.when.regexp:
            system.filesystem.mount_point: '^/(sys|cgroup|proc|dev|etc|host|lib)($|/)'
      - module: docker
        metricsets:
          - "container"
          - "cpu"
          - "diskio"
          - "event"
          - "healthcheck"
          - "info"
          - "memory"
          - "network"
        hosts: ["unix:///var/run/docker.sock"]
        period: 10s
        enabled: true


  nodeSelector: {}
  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security other sensitive values
  secretMounts: []
  #  - name: metricbeat-certificates
  #    secretName: metricbeat-certificates
  #    path: /usr/share/metricbeat/certs
  # Various pod security context settings. Bear in mind that many of these have an impact on metricbeat functioning properly.
  # - Filesystem group for the metricbeat user. The official elastic docker images always have an id of 1000.
  # - User that the container will execute as. Typically necessary to run as root (0) in order to properly collect host container logs.
  # - Whether to execute the metricbeat containers as privileged containers. Typically not necessarily unless running within environments such as OpenShift.
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    requests:
      cpu: "100m"
      memory: "500Mi"
    limits:
      cpu: "1000m"
      memory: "500Mi"
  tolerations: []

deployment:
  # Annotations to apply to the deployment
  annotations: {}
  # additionals labels
  labels: {}
  affinity: {}
  # Include the deployment
  enabled: true
  # Extra environment variables for Metricbeat container.
  envFrom: []
  # - configMapRef:
  #     name: config-secret
  extraEnvs:
    - name: NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
  #  - name: MY_ENVIRONMENT_VAR
  #    value: the_value_goes_here
  # Allows you to add any config files in /usr/share/metricbeat
  extraVolumes: []
  # - name: extras
  #   emptyDir: {}
  extraVolumeMounts: []
  # - name: extras
  #   mountPath: /usr/share/extras
  #   readOnly: true
  # such as metricbeat.yml for deployment
  hostAliases: []
  #- ip: "127.0.0.1"
  #  hostnames:
  #  - "foo.local"
  #  - "bar.local"
  metricbeatConfig:
    metricbeat.yml: |
      metricbeat.config.modules:
        path: $${path.config}/modules.d/*.yml
        reload.enabled: false

      processors:
        - add_cloud_metadata:

      output.elasticsearch:
        hosts: ['$${ELASTICSEARCH_HOST:opensearch-cluster-master}.opensearch:$${ELASTICSEARCH_PORT:9200}']
        username: "admin"
        password: "admin"
        protocol: "https"
        enabled: true
        ssl.verification_mode: none
      setup.ilm.enabled: false
      setup.dashboards.enabled: false

      metricbeat.modules:
      - module: kubernetes
        enabled: true
        metricsets:
          - state_node
          - state_daemonset
          - state_deployment
          - state_replicaset
          - state_statefulset
          - state_pod
          - state_container
          - state_cronjob
          - state_resourcequota
          - state_service
          - state_persistentvolume
          - state_persistentvolumeclaim
          - state_storageclass
          - event
        period: 10s
        add_metadata: true
        host: $${NODE_NAME}
        hosts: ["prometheus-kube-state-metrics.prometheus:8080"]
      - module: prometheus
        period: 10s
        hosts: ["prometheus-operated.prometheus:9090"]
        metrics_path: /metrics




  nodeSelector: {}
  # A list of secrets and their paths to mount inside the pod
  # This is useful for mounting certificates for security other sensitive values
  secretMounts: []
  #  - name: metricbeat-certificates
  #    secretName: metricbeat-certificates
  #    path: /usr/share/metricbeat/certs
  securityContext:
    runAsUser: 0
    privileged: false
  resources:
    requests:
      cpu: "700m"
      memory: "700Mi"
    limits:
      cpu: "7000m"
      memory: "700Mi"
  tolerations: []

# Replicas being used for the kube-state-metrics metricbeat deployment
replicas: 1

extraContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

extraInitContainers: ""
# - name: dummy-init
#   image: busybox
#   command: ['echo', 'hey']

# Root directory where metricbeat will write data to in order to persist registry data across pod restarts (file position and other metadata).
hostPathRoot: /var/lib

image: "docker.elastic.co/beats/metricbeat-oss"
imageTag: "7.12.1"
imagePullPolicy: "IfNotPresent"
imagePullSecrets: []

livenessProbe:
  exec:
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash -e
        curl --fail 127.0.0.1:5066
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

readinessProbe:
  exec:
    command:
      - sh
      - -c
      - |
        #!/usr/bin/env bash -e
        metricbeat test output
  failureThreshold: 3
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5

# Whether this chart should self-manage its service account, role, and associated role binding.
managedServiceAccount: true

clusterRoleRules:
  - apiGroups: [""]
    resources:
      - nodes
      - namespaces
      - events
      - pods
      - services
    verbs: ["get", "list", "watch"]
  - apiGroups: ["extensions"]
    resources:
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apps"]
    resources:
      - statefulsets
      - deployments
      - replicasets
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - nodes/stats
    verbs: ["get"]

podAnnotations:
  {}
  # iam.amazonaws.com/role: es-cluster

# Custom service account override that the pod will use
serviceAccount: ""

# Annotations to add to the ServiceAccount that is created if the serviceAccount value isn't set.
serviceAccountAnnotations:
  {}
  # eks.amazonaws.com/role-arn: arn:aws:iam::111111111111:role/k8s.clustername.namespace.serviceaccount

# How long to wait for metricbeat pods to stop gracefully
terminationGracePeriod: 30

# This is the PriorityClass settings as defined in
# https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/#priorityclass
priorityClassName: ""

updateStrategy: RollingUpdate

# Override various naming aspects of this chart
# Only edit these if you know what you're doing
nameOverride: ""
fullnameOverride: ""

kube_state_metrics:
  enabled: false
  # host is used only when kube_state_metrics.enabled: false
  host: "prometheus-kube-state-metrics.prometheus:8080"

# Add sensitive data to k8s secrets
secrets: []
#  - name: "env"
#    value:
#      ELASTICSEARCH_PASSWORD: "LS1CRUdJTiBgUFJJVkFURSB"
#      api_key: ui2CsdUadTiBasRJRkl9tvNnw
#  - name: "tls"
#    value:
#      ca.crt: |
#        LS0tLS1CRUdJT0K
#        LS0tLS1CRUdJT0K
#        LS0tLS1CRUdJT0K
#        LS0tLS1CRUdJT0K
#      cert.crt: "LS0tLS1CRUdJTiBlRJRklDQVRFLS0tLS0K"
#      cert.key.filepath: "secrets.crt" # The path to file should be relative to the `values.yaml` file.

# DEPRECATED
affinity: {}
envFrom: []
extraEnvs: []
extraVolumes: []
extraVolumeMounts: []
# Allows you to add any config files in /usr/share/metricbeat
# such as metricbeat.yml for both daemonset and deployment
metricbeatConfig: {}
nodeSelector: {}
podSecurityContext: {}
resources: {}
secretMounts: []
tolerations: []
labels: {}

# metricbeat export template > metricbeat.template.json
# curl -XPOST -u admin:admin -H 'osd-xsrf: true' -H 'Content-Type: application/json' 'https://opensearch-cluster-master.opensearch:9200/_template/metricbeat-7.12.1' -d@metricbeat.template.json --insecure
# cd kibana/7/dashboard/
# curl -XPOST -u admin:admin -H 'osd-xsrf: true' -H 'Content-Type: application/json' 'http://opensearch-dashboards.opensearch:5601/api/opensearch-dashboards/dashboards/import?exclude=index-pattern&force=true' -d@Metricbeat-kubernetes-overview.json
# curl -XPOST -u admin:admin -H 'osd-xsrf: true' -H 'Content-Type: application/json' 'http://opensearch-dashboards.opensearch:5601/api/opensearch-dashboards/dashboards/import?exclude=index-pattern&force=true' -d@Metricbeat-host-overview.json
# curl -XPOST -u admin:admin -H 'osd-xsrf: true' -H 'Content-Type: application/json' 'http://opensearch-dashboards.opensearch:5601/api/opensearch-dashboards/dashboards/import?exclude=index-pattern&force=true' -d@Metricbeat-system-overview.json
# curl -XPOST -u admin:admin -H 'osd-xsrf: true' -H 'Content-Type: application/json' 'http://opensearch-dashboards.opensearch:5601/api/opensearch-dashboards/dashboards/import?exclude=index-pattern&force=true' -d@Metricbeat-docker-overview.json
