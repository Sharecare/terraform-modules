# Copyright OpenSearch Contributors
# SPDX-License-Identifier: Apache-2.0

# Default values for opensearch-dashboards.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

opensearchHosts: "https://opensearch-cluster-master.opensearch:9200"
replicaCount: 1

image: "opensearchproject/opensearch-dashboards"
imageTag: "1.2.0"
imagePullPolicy: "IfNotPresent"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

rbac:
  create: true

# A list of secrets and their paths to mount inside the pod
# This is useful for mounting certificates for security and for mounting
# the X-Pack license
secretMounts: []
#  - name: certs
#    secretName: dashboard-certs
#    path: /usr/share/dashboards/certs

podAnnotations: {}

extraEnvs: []
#  - name: "NODE_OPTIONS"
#    value: "--max-old-space-size=1800"

envFrom: []

extraVolumes:
  - name: init-files
    configMap:
      name: "opensearch-dashboards-init"

extraVolumeMounts:
  - name: init-files
    mountPath: /usr/share/init-files
    readOnly: true

extraInitContainers: ""

extraContainers: ""

podSecurityContext: {}

securityContext:
  capabilities:
    drop:
      - ALL
  # readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

config: {}
  # Default OpenSearch Dashboards configuration from docker image of Dashboards
  #  opensearch_dashboards.yml:
  #   server:
  #     name: dashboards
  #     host: 0.0.0.0

  # Dashboards TLS Config (Ensure the cert files are present before enabling SSL
      # ssl:
      #   enabled: true
      #   key: /usr/share/opensearch-dashboards/certs/dashboards-key.pem
      #   certificate: /usr/share/opensearch-dashboards/certs/dashboards-crt.pem

    # determines how dashboards will verify certificates (needs to be none for default opensearch certificates to work)
    # opensearch:
    #   ssl:
    #     certificateAuthorities: /usr/share/opensearch-dashboards/certs/dashboards-root-ca.pem
    #     if utilizing custom CA certs for connection to opensearch, provide the CA here

priorityClassName: ""

opensearchAccount:
  secret: ""
  keyPassphrase:
    enabled: true

labels: {}

hostAliases: []
# - ip: "127.0.0.1"
#   hostnames:
#   - "foo.local"
#   - "bar.local"

serverHost: "0.0.0.0"

service:
  type: ClusterIP
  port: 5601
  loadBalancerIP: ""
  nodePort: ""
  labels: {}
  annotations: {}
    # example SET if you want to expose opensearch-dashboards
    # getambassador.io/config: |
    #   ---
    #   apiVersion: ambassador/v1
    #   kind:  Mapping
    #   name: opensearch-dashboards
    #   prefix: /
    #   host: ${OPENSEARCH_URL}
    #   host_regex: false
    #   service: opensearch-dashboards.opensearch:5601
    #   add_response_headers:
    #     Content-Security-Policy: "frame-ancestors 'none'"
    #     Strict-Transport-Security: max-age=31536000;
    #     X-Frame-Options: deny
    #     X-XSS-Protection: 1; mode=block
    #     Referrer-Policy: strict-origin-when-cross-origin
    #     Feature-Policy: "geolocation 'self'; camera 'self'"
    #     X-Content-Type-Options: nosniff
  loadBalancerSourceRanges: []
  # 0.0.0.0/0
  httpPortName: http

ingress:
  enabled: false
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          backend:
            serviceName: chart-example.local
            servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  requests:
    cpu: "100m"
    memory: "512M"
  limits:
    cpu: "100m"
    memory: "512M"

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

updateStrategy:
  type: "Recreate"

nodeSelector: {}

tolerations: []

affinity: {}

lifecycle:
  preStop:
    exec:
      command: ["/bin/sh", "-c", "echo Shutting Down"]
  # postStart:
  #   exec:
  #     command:
  #       - bash
  #       - -c
  #       - |
  #         #!/bin/bash
  #         until curl https://opensearch-master.opensearch:9200; do echo "Waiting for Opensearch to be available..."; sleep 5; done;
  #         until curl http://127.0.0.1:5601; do echo "Waiting for Kibana to be available..."; sleep 5; done;
  #         curl -X POST "http://admin:admin@127.0.0.1:5601/api/saved_objects/_import?overwrite=true&createNewCopies=false" -H "osd-xsrf: true" --form file=@/usr/share/init-files/export.ndjson -H 'kbn-xsrf: true'
  #         curl -X -k PUT "https://admin:admin@opensearch-master.opensearch:9200/_plugins/_ism/policies/delete_old_logs" -H 'Content-Type: application/json' --from file=@/usr/share/init-files/deleteold-logs-indices.json
  #         curl -X -k PUT "https://admin:admin@opensearch-master.opensearch:9200/_plugins/_ism/policies/deleteold_metricbeat_indices" -H 'Content-Type: application/json' --from file=@/usr/share/init-files/deleteold-metricbeat-indices.json
  #         curl -X -k PUT "https://admin:admin@opensearch-master.opensearch:9200/_plugins/_rollup/jobs/metricbeat-rollup" -H 'Content-Type: application/json' --from file=@/usr/share/init-files/rollup-metricbeat.json 2>&1 1> /tmp/postStart.out;
